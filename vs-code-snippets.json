{
"getRequest": {
    "prefix": "getRequest",
    "body": [
      "type ${1:example}Request = {",
      "",
      "};",
      "",
      "type ${1:example}Response = {",
      "",
      "};",
      "",
      "export const ${2:request} = async (request: ${1:example}Request) => {",
      "    const response = await fetch(`${3:url}`, {",
      "    method: 'GET',",
      "    headers: {",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "    }",
      "  });",
      "",
      "  if (!response.ok) {",
      "    throw new Error('Request: ${2:request} failed to fetch data');",
      "  }",
      "",
      "  return response.json() as Promise<${1:example}Response>;",
      "}"
    ],
    "description": "getRequest"
  },
  "postRequest": {
    "prefix": "postRequest",
    "body": [
      "type ${1:example}Request = {",
      "",
      "};",
      "",
      "type ${1:example}Response = {",
      "",
      "};",
      "",
      "export const ${2:request} = async (request: ${1:example}Request) => {",
      "    const response = await fetch(`${3:url}`, {",
      "    method: 'POST',",
      "    body: JSON.stringify(request),",
      "    headers: {",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "    }",
      "  });",
      "",
      "  if (!response.ok) {",
      "    throw new Error('Request: ${2:request} failed to fetch data');",
      "  }",
      "",
      "  return response.json() as Promise<${1:example}Response>;",
      "}"
    ],
    "description": "postRequest"
  },
  "putRequest": {
    "prefix": "putRequest",
    "body": [
      "type ${1:example}Request = {",
      "",
      "};",
      "",
      "type ${1:example}Response = {",
      "",
      "};",
      "",
      "export const ${2:request} = async (id:number, request: ${1:example}Request) => {",
      "    const response = await fetch(`/${id}`, {",
      "    method: 'PUT',",
      "    body: JSON.stringify(request),",
      "    headers: {",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "    }",
      "  });",
      "",
      "  if (!response.ok) {",
      "    throw new Error('Request: ${2:request} failed to fetch data');",
      "  }",
      "",
      "  return response.json() as Promise<${1:example}Response>;",
      "}"
    ],
    "description": "putRequest"
  },
  "deleteRequest": {
    "prefix": "deleteRequest",
    "body": [
      "export const ${2:request} = async (id:number) => {",
      "    const response = await fetch(`/${id}`, {",
      "    method: 'DELETE',",
      "    headers: {",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "    }",
      "  });",
      "",
      "  if (!response.ok) {",
      "    throw new Error('Request: ${2:request} failed to fetch data');",
      "  }",
      "",
      "  return response.json();",
      "}"
    ],
    "description": "deleteRequest"
  },
  "mutationFn": {
    "prefix": "mutationFn",
    "body": [
      "import { MutateFunction } from 'react-query'",
      "",
      "type ${1:example}Request = {",
      "      ",
      "};",
      "",
      "type ${1:example}Response = {",
      "",
      "};",
      "",
      "export const ${2:request}: MutateFunction<",
      "  ${1:example}Response,",
      "  any,",
      " ${1:example}Request",
      "> = async () => {",
      "  const response = await fetch(`${3:url}`), {",
      "    method: '${4:method}',",
      "    headers: {,",
      "     Accept: 'application/json',",
      "     'Content-Type': 'application/json',",
      "      },",
      "  })",
      "",
      "  if (!response.ok) {",
      "    throw new Error('Request: ${2:request} failed to fetch data.')",
      "  }",
      "",
      "  return response.json()",
      "}"
    ],
    "description": "mutationFn"
  }
  }
