#! /usr/bin/node
const { writeFile } = require('fs/promises');
/**
 *
 * @param {string} arg
 * @returns {string}
 */
const capitalize = (arg) => arg.charAt(0).toUpperCase() + arg.slice(1);
const singular = (arg) => arg.slice(0, -1);

const args = process.argv;

const endpointArg = args[2];
// const fileArg = args[3];

const [_, endpoint] = endpointArg.split('=');

if (!endpoint) {
  console.log('Endpoint is required!');
  process.exit(1);
}

// const [__, file] = fileArg.split('=');

// if (!file) {
//   console.log('File path is required!');
//   process.exit(1);
// }

const stub = `
const baseUrl = '/api';

type Get${capitalize(endpoint)}Request = {};
type Get${capitalize(endpoint)}Response = {};

export const get${capitalize(endpoint)} = async (request: Get${capitalize(endpoint)}Request) => {
  const search = new URLSearchParams(request);
  const response = await fetch(\`/${endpoint}\`, {
    method: 'GET',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
    }
  });

  if (!response.ok) {
    throw new Error('Request: get${capitalize(endpoint)} failed to fetch data');
  }

  return response.json() as Promise<Get${capitalize(endpoint)}Response>;
}

type Get${capitalize(singular(endpoint))}Response = {}

export const get${capitalize(singular(endpoint))} = async (id: number) => {
  const response = await fetch(\`${endpoint}/{id}\`, {
    method: 'GET',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
    },
  })

  if (!response.ok) {
    throw new Error('Request: get${capitalize(singular(endpoint))} failed to fetch data');
  }

  return response.json() as Promise<Get${capitalize(singular(endpoint))}Response>;
}

type Create${capitalize(singular(endpoint))}Request = {}
type Create${capitalize(singular(endpoint))}Response = {}

export const create${capitalize(singular(endpoint))} = async (payload: Create${capitalize(
  singular(endpoint)
)}Request) => {
  const response = await fetch('baseUrl + endpoint', {
    method: 'POST',
    body: JSON.stringify(payload),
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
    },
  })

  if (!response.ok) {
    throw new Error('Request: create${capitalize(singular(endpoint))} failed to fetch data');
  }

  return response.json() as Promise<Create${capitalize(singular(endpoint))}Response>;
}

type Update${capitalize(singular(endpoint))}Request = {}

export const update${capitalize(singular(endpoint))} = async (id: number, payload: Update${capitalize(
  singular(endpoint)
)}Request) => {
  const response = await fetch(\`baseUrl${endpoint}\`, {
    method: 'PUT',
    body: JSON.stringify(payload),
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
    },
  })

  if (!response.ok) {
    throw new Error('Request: update${capitalize(singular(endpoint))} failed to fetch data');
  }

  return response.json();
}

export const delete${capitalize(singular(endpoint))} = async (id: number) => {
  const response = await fetch(\`baseUrl${endpoint}\`, {
    method: 'DELETE',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
    },
  })

  if (!response.ok) {
    throw new Error('Request: delete${capitalize(singular(endpoint))} failed to fetch data');
  }

  return response.json();
}
`;

console.log(stub);

(async () => {
  await writeFile(process.cwd() + '/abc.ts', stub, { encoding: 'utf-8' });
})();
